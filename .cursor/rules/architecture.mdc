---
description: 
globs: 
alwaysApply: false
---
# Tauri Daily Helper 架构设计

## 技术栈概述

Tauri Daily Helper 采用现代化的技术栈，结合了 Rust 的性能与安全性和 Web 前端技术的灵活性：

- **前端框架**：Next.js + React + TypeScript
- **UI 组件库**：Tailwind CSS + shadcn/ui
- **状态管理**：Zustand
- **后端框架**：Tauri (Rust)
- **数据库**：
  - **主要存储**：Supabase (PostgreSQL)
  - **临时缓存**：IndexedDB (通过 Dexie.js)
  - **设置存储**：Tauri 的持久化存储 API
- **认证服务**：Supabase Auth
- **数据同步**：实时订阅 + 自定义同步逻辑

## 系统架构

### 整体架构

```
┌─────────────────────────────────────────────────────┐
│                  Tauri 应用容器                     │
│                                                     │
│  ┌─────────────────┐         ┌──────────────────┐   │
│  │                 │         │                  │   │
│  │   React 前端    │◄─────►  │   Rust 后端      │   │
│  │                 │  IPC    │                  │   │
│  └─────────────────┘         └──────────────────┘   │
│          │                            │             │
└──────────┼────────────────────────────┼─────────────┘
           │                            │
           ▼                            ▼
┌─────────────────────┐      ┌─────────────────────┐
│                     │      │                     │
│  IndexedDB 缓存     │      │  Supabase 服务      │
│                     │      │                     │
└─────────────────────┘      └─────────────────────┘
```

### 修改后的数据存储策略

1. **主数据存储**：Supabase PostgreSQL
   - 所有持久化数据存储在云端
   - 利用 Supabase 实时订阅功能实现数据同步
   - 使用 Row Level Security (RLS) 保障数据安全

2. **本地缓存方案**：
   - 使用浏览器内置的 IndexedDB (通过 Dexie.js) 替代 SQLite
   - 仅缓存最近访问的数据和离线操作日志
   - 避免了 SQLite 可能导致的应用崩溃问题

3. **应用设置存储**：
   - 使用 Tauri 的 Store API 存储应用配置和设置
   - 轻量级、不会导致应用崩溃

### 前端架构

前端采用组件化设计，基于 Next.js 和 React 构建：

```
┌─────────────────────────────────────────────────────────┐
│                      React 应用                         │
│                                                         │
│  ┌─────────────┐  ┌─────────────┐  ┌─────────────┐      │
│  │             │  │             │  │             │      │
│  │  任务管理    │  │  笔记功能   │  │  习惯追踪   │      │
│  │             │  │             │  │             │      │
│  └─────────────┘  └─────────────┘  └─────────────┘      │
│                                                         │
│  ┌─────────────────────────────────────────────┐        │
│  │                                             │        │
│  │              共享组件库                      │        │
│  │                                             │        │
│  └─────────────────────────────────────────────┘        │
│                                                         │
│  ┌─────────────────────────────────────────────┐        │
│  │                                             │        │
│  │              状态管理 (Zustand)              │        │
│  │                                             │        │
│  └─────────────────────────────────────────────┘        │
│                                                         │
│  ┌─────────────────────────────────────────────┐        │
│  │                                             │        │
│  │              Tauri API 封装                 │        │
│  │                                             │        │
│  └─────────────────────────────────────────────┘        │
│                                                         │
└─────────────────────────────────────────────────────────┘
```

### 后端架构

后端使用 Rust 编写，通过 Tauri 框架与前端交互：

```
┌─────────────────────────────────────────────────────────┐
│                      Rust 后端                          │
│                                                         │
│  ┌─────────────────────────────────────────────┐        │
│  │                                             │        │
│  │              Tauri 命令处理                 │        │
│  │                                             │        │
│  └─────────────────────────────────────────────┘        │
│                                                         │
│  ┌─────────────┐  ┌─────────────┐  ┌─────────────┐      │
│  │             │  │             │  │             │      │
│  │  API 服务    │  │  文件操作   │  │  系统集成   │      │
│  │             │  │             │  │             │      │
│  └─────────────┘  └─────────────┘  └─────────────┘      │
│                                                         │
│  ┌─────────────────────────────────────────────┐        │
│  │                                             │        │
│  │              数据同步服务                    │        │
│  │                                             │        │
│  └─────────────────────────────────────────────┘        │
│                                                         │
└─────────────────────────────────────────────────────────┘
```

## 数据模型

### 核心实体

1. **用户 (User)**
   - id: UUID
   - email: String
   - created_at: Timestamp
   - last_login: Timestamp

2. **任务 (Task)**
   - id: UUID
   - user_id: UUID (外键)
   - title: String
   - description: String (可选)
   - status: Enum (待办、进行中、已完成)
   - priority: Enum (低、中、高)
   - due_date: Timestamp (可选)
   - created_at: Timestamp
   - updated_at: Timestamp
   - tags: Array<String>
   - project_id: UUID (可选，外键)

3. **项目 (Project)**
   - id: UUID
   - user_id: UUID (外键)
   - name: String
   - description: String (可选)
   - color: String
   - created_at: Timestamp
   - updated_at: Timestamp

4. **笔记 (Note)**
   - id: UUID
   - user_id: UUID (外键)
   - title: String
   - content: String
   - notebook_id: UUID (外键)
   - created_at: Timestamp
   - updated_at: Timestamp
   - tags: Array<String>

5. **笔记本 (Notebook)**
   - id: UUID
   - user_id: UUID (外键)
   - name: String
   - description: String (可选)
   - color: String
   - created_at: Timestamp
   - updated_at: Timestamp

6. **习惯 (Habit)**
   - id: UUID
   - user_id: UUID (外键)
   - name: String
   - description: String (可选)
   - frequency: Enum (每日、每周、自定义)
   - created_at: Timestamp
   - updated_at: Timestamp

7. **习惯记录 (HabitLog)**
   - id: UUID
   - habit_id: UUID (外键)
   - date: Date
   - completed: Boolean
   - notes: String (可选)

8. **日报 (DailyReport)**
   - id: UUID
   - user_id: UUID (外键)
   - date: Date
   - content: String
   - should_complete: String
   - completed: String
   - uncompleted: String
   - created_at: Timestamp
   - updated_at: Timestamp

## 修改后的同步机制

应用采用以下同步策略确保数据在多设备间保持一致：

1. **Supabase 实时订阅**：
   - 利用 Supabase 的实时订阅功能自动同步数据变更
   - 减少手动同步的需求和复杂性

2. **本地优先写入策略**：
   - 用户操作首先写入到 IndexedDB 缓存
   - 同时通过 Supabase API 更新云端数据
   - 若网络中断，操作记录到离线日志

3. **增量同步**：
   - 只同步自上次同步以来变更的数据
   - 使用事务时间戳跟踪变更

4. **冲突解决**：
   - 基于版本向量的冲突检测
   - 使用"最后写入胜出"作为默认策略
   - 提供用户界面处理复杂冲突

5. **离线支持**：
   - 在 IndexedDB 中缓存关键数据
   - 离线操作记录到队列中
   - 网络恢复后自动同步

## 安全设计

1. **认证**：使用 Supabase Auth 进行用户认证
2. **数据加密**：
   - 传输加密：HTTPS
   - 敏感数据加密：使用客户端加密敏感信息
3. **权限控制**：
   - 使用 Supabase Row Level Security (RLS)
   - 确保用户只能访问自己的数据
4. **安全存储**：敏感信息使用系统安全存储机制

## 离线体验增强

1. **预取关键数据**：应用启动时预取用户常用数据
2. **渐进式加载**：优先显示缓存数据，后台静默更新
3. **状态指示器**：清晰显示在线/离线状态和同步进度
4. **批量同步**：网络恢复后智能批量处理同步请求

## 扩展性考虑

1. **插件系统**：预留插件接口以支持未来功能扩展
2. **主题系统**：可自定义的主题和界面布局
3. **API 版本控制**：后端 API 设计支持版本控制
4. **第三方集成**：预留与第三方服务集成的接口

## 性能优化

1. **按需加载**：实现组件和数据的延迟加载
2. **缓存策略**：智能缓存频繁访问的数据
3. **批处理操作**：合并多个API调用减少网络请求
4. **虚拟列表**：处理大量数据时使用虚拟滚动




