"use client"
import React, { useState, useEffect } from "react"
import { invoke } from "@tauri-apps/api/core"
import { Input, TextArea, Button } from "@/components/ui"
import { DailyCard } from "@/components/ui/DailyCard"
import { authService } from "@/lib/services"
import { open } from "@tauri-apps/plugin-dialog"
import { supabase } from "@/lib/supabaseClient"
import { DailyReport } from "@/types"  // 导入统一的DailyReport类型

// 修改日志函数，确保只在客户端执行
async function logToBackend(level: string, message: string) {
    if (typeof window === 'undefined') {
        return // 在服务器端不执行
    }

    console.log(`[${level.toUpperCase()}] ${message}`) // 在前端控制台也显示
    try {
        await invoke("log_message", { level, message })
    } catch (error) {
        console.error("发送日志到后端失败:", error)
    }
}

// 获取当前用户ID，返回一个有效的字符串ID
const getCurrentUserId = () => {
    if (typeof window === 'undefined') {
        return "guest" // 在服务器端返回默认值
    }

    const user = authService.getCurrentUser()
    logToBackend("debug", `获取到的用户信息: ${JSON.stringify(user || {})}`)

    // 如果user为null或undefined，返回"guest"
    if (!user) {
        logToBackend("warn", "用户未登录，使用临时ID: guest")
        return "guest"
    }

    // 如果user.id是'anonymous'或undefined/null，返回"guest"
    if (!user.id || user.id === 'anonymous') {
        logToBackend("warn", "用户ID无效，使用临时ID: guest")
        return "guest"
    }

    // 否则返回实际用户ID
    logToBackend("info", `使用实际用户ID: ${user.id}`)
    return user.id
}

// 导入或定义getTaskIdForToday函数
function getTaskIdForToday(dateStr?: string) {
    const date = dateStr ? new Date(dateStr) : new Date()
    let day = date.getDay()
    if (day === 0) day = 7 // 周日
    return `FE-${String(day).padStart(3, '0')}`
}

export default function DailyPage() {
    const [date, setDate] = useState<string>("")
    const [shouldComplete, setShouldComplete] = useState<string>("")
    const [completed, setCompleted] = useState<string>("")
    const [uncompleted, setUncompleted] = useState<string>("")
    const [remarks, setRemarks] = useState<string>("")
    const [taskId, setTaskId] = useState<string>("")
    const [taskName, setTaskName] = useState<string>("")
    const [planHours, setPlanHours] = useState<string>("8")
    const [actualHours, setActualHours] = useState<string>("8")

    const [status, setStatus] = useState<string>("")
    const [isLoading, setIsLoading] = useState<boolean>(false)
    const [recentReports, setRecentReports] = useState<DailyReport[]>([])
    const [pageLoading, setPageLoading] = useState<boolean>(true) // 页面全局加载状态

    // 组件初始化
    useEffect(() => {
        const initializeComponent = async () => {
            try {
                setPageLoading(true) // 开始加载页面
                // 在组件加载后输出日志
                console.log("==================== DailyPage 组件已加载 ====================")
                logToBackend("info", "==================== DailyPage 组件已加载 ====================")

                // 测试用户认证状态
                const currentUser = authService.getCurrentUser()
                console.log("当前用户信息:", currentUser)

                // 设置今天的日期
                const now = new Date()
                const todayStr = now.toISOString().split('T')[0]
                console.log("初始化日期为:", todayStr)
                setDate(todayStr)

                // 加载日报列表
                try {
                    await loadRecentReports()
                } catch (loadError) {
                    console.error("加载最近日报失败:", loadError)
                }

                // 加载当天的日报（如果有）
                try {
                    await loadDailyReport(todayStr)
                } catch (todayError) {
                    console.error("加载今日日报失败:", todayError)
                    clearForm()
                    setStatus("创建新日报")
                }
            } catch (error) {
                console.error("组件初始化错误:", error)
                setStatus("页面初始化错误，请刷新重试")
            } finally {
                // 无论成功还是失败，都完成加载
                setPageLoading(false)
            }
        }

        initializeComponent()
    }, [])

    // 加载最近的日报
    const loadRecentReports = async () => {
        setIsLoading(true)
        try {
            // 直接从Supabase获取数据
            const { data, error } = await supabase
                .from('dailies')
                .select('*')
                .order('date', { ascending: false })
                .limit(10)

            if (error) throw error

            if (data && data.length > 0) {
                setRecentReports(data)
                console.log('从Supabase加载日报列表:', data.length, '条记录')
            } else {
                console.log('没有找到任何日报记录')
            }
        } catch (error: any) {
            console.error('加载日报失败:', error)
            setStatus('加载日报失败: ' + (error.message || String(error)))
        } finally {
            setIsLoading(false)
        }
    }

    // 加载指定日期的日报
    const loadDailyReport = async (selectedDate: string) => {
        try {
            setIsLoading(true)
            setStatus("正在加载...")

            // 获取当前用户ID，确保有一个有效值
            const userId = getCurrentUserId()

            console.log(`加载日期 ${selectedDate} 的日报，用户ID: ${userId}`)
            logToBackend("info", `加载日期 ${selectedDate} 的日报，用户ID: ${userId}`)

            // 从Supabase加载
            try {
                // 先查询带user_id的记录
                const { data, error } = await supabase
                    .from('dailies')
                    .select('*')
                    .eq('date', selectedDate)
                    .eq('user_id', userId)
                    .maybeSingle()

                if (!error && data) {
                    console.log("成功加载日报:", data)

                    // 更新表单数据
                    setDate(data.date || selectedDate)
                    setShouldComplete(data.should_complete || "")
                    setCompleted(data.completed || "")
                    setUncompleted(data.uncompleted || "")
                    setRemarks(data.remarks || "")
                    setTaskId(data.task_id || getTaskIdForToday(selectedDate))
                    setTaskName(data.task_name || "")
                    setPlanHours(data.plan_hours || "8")
                    setActualHours(data.actual_hours || "8")

                    setStatus("已加载日报")
                    return
                }

                // 如果没有找到记录，准备创建新日报
                console.log("未找到该日期的日报记录，准备创建新日报")
                clearForm()
                setTaskId(getTaskIdForToday(selectedDate))
                setStatus("新建日报")
            } catch (error) {
                console.error("加载日报失败:", error)
                logToBackend("error", `加载日报失败: ${error}`)

                // 如果出错，清空表单准备创建新日报
                clearForm()
                setTaskId(getTaskIdForToday(selectedDate))
                setStatus("新建日报")
            }
        } finally {
            setIsLoading(false)
        }
    }

    // 清空表单
    const clearForm = () => {
        setShouldComplete("")
        setCompleted("")
        setUncompleted("")
        setRemarks("")
        setTaskId("")
        setTaskName("")
        setPlanHours("8")
        setActualHours("8")
    }

    // 保存日报
    const saveDailyReport = async () => {
        if (!date) {
            setStatus("请选择日期")
            return
        }

        try {
            setIsLoading(true)
            setStatus("正在保存...")

            // 获取当前用户ID，确保有一个有效值
            const userId = getCurrentUserId()

            console.log(`保存日期 ${date} 的日报，用户ID: ${userId}`)
            logToBackend("info", `保存日期 ${date} 的日报，用户ID: ${userId}`)

            // 首先检查是否存在同一日期的记录
            const { data: existingData, error: checkError } = await supabase
                .from('dailies')
                .select('id')
                .eq('date', date)
                .eq('user_id', userId)
                .maybeSingle()

            if (checkError) {
                console.error("检查日报记录时出错:", checkError)
                logToBackend("error", `检查日报记录时出错: ${checkError.message}`)
            }

            // 准备保存的数据
            const reportData: any = {
                date,
                task_id: taskId || '',
                task_name: taskName || '',
                should_complete: shouldComplete || '',
                completed: completed || '',
                uncompleted: uncompleted || '',
                plan_hours: planHours || '8',
                actual_hours: actualHours || '8',
                remarks: remarks || '',
                user_id: userId,
                updated_at: new Date().toISOString()
            }

            console.log("即将保存的日报数据:", reportData)

            let data, error

            // 判断是更新还是新增
            if (existingData?.id) {
                // 更新现有记录
                console.log("更新日期为", date, "的日报记录")
                const result = await supabase
                    .from('dailies')
                    .update(reportData)
                    .eq('id', existingData.id)
                    .select()
                    .single()

                data = result.data
                error = result.error
            } else {
                // 新增记录
                console.log("创建日期为", date, "的新日报记录")
                reportData.created_at = new Date().toISOString()
                const result = await supabase
                    .from('dailies')
                    .insert(reportData)
                    .select()
                    .single()

                data = result.data
                error = result.error
            }

            if (error) {
                throw new Error(`保存到Supabase失败: ${error.message}`)
            }

            console.log("保存结果:", data)
            logToBackend("info", `保存结果: ${JSON.stringify(data)}`)

            // 保存成功后，重新加载记录列表
            setStatus(`保存成功!`)
            await loadRecentReports()

            // 重新加载当前日报，确保显示最新内容
            setTimeout(() => {
                logToBackend("debug", "延迟500ms后重新加载当前日报")
                loadDailyReport(date)
            }, 500)
        } catch (error) {
            console.error("保存日报失败:", error)
            logToBackend("error", `保存日报失败: ${error}`)
            setStatus(`保存失败: ${error}`)
        } finally {
            setIsLoading(false)
        }
    }

    // 从日报快速生成周报
    const generateWeeklyFromDaily = async () => {
        // 获取当前日期所在的周一和周五
        const currentDate = new Date(date)
        const day = currentDate.getDay() || 7
        const mondayDate = new Date(currentDate)
        mondayDate.setDate(currentDate.getDate() - day + 1)

        const fridayDate = new Date(currentDate)
        fridayDate.setDate(currentDate.getDate() - day + 5)

        const startDate = mondayDate.toISOString().split('T')[0]
        const endDate = fridayDate.toISOString().split('T')[0]

        try {
            setIsLoading(true)
            setStatus("正在生成周报...")
            // 调用后端函数从日报生成周报
            await invoke("generate_weekly_from_daily", { startDate, endDate })
            setStatus("周报生成成功，请前往周报页面查看")
        } catch (error) {
            console.error("生成周报失败:", error)
            setStatus(`生成周报失败: ${error}`)
        } finally {
            setIsLoading(false)
        }
    }

    // 获取Git未提交更改并添加到今日已完成事项
    const fetchGitChanges = async () => {
        try {
            setIsLoading(true)
            setStatus("正在获取Git更改...")

            // 打开文件夹对话框，选择Git仓库
            const repoPath = await open({
                directory: true,
                multiple: false,
                title: "选择Git仓库根目录"
            })

            if (!repoPath || Array.isArray(repoPath)) {
                setStatus("未选择有效的仓库路径")
                setIsLoading(false)
                return
            }

            // 调用Rust函数获取Git更改
            const changes = await invoke<string>("get_git_changes", {
                repoPath: repoPath,
                prefix: "- " // 使用无序列表格式
            })

            if (changes) {
                // 将结果添加到"今日已完成事项"
                setCompleted(prev => {
                    // 如果原来有内容，添加到后面，否则直接使用
                    return prev ? `${prev}\n\n${changes}` : changes
                })
                setStatus("Git更改已成功添加到今日已完成事项")
            } else {
                setStatus("没有找到未提交的更改")
            }
        } catch (error) {
            console.error("获取Git更改失败:", error)
            setStatus(`获取Git更改失败: ${error}`)
        } finally {
            setIsLoading(false)
        }
    }

    // 日期变更时加载对应日报
    const handleDateChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const newDate = e.target.value
        setDate(newDate)
        loadDailyReport(newDate)
    }

    return (
        <div className="p-4 max-w-5xl mx-auto">
            {/* 全局加载遮罩 */}
            {pageLoading && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                    <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-lg text-center">
                        <div className="w-16 h-16 border-4 border-t-blue-500 border-blue-200 rounded-full animate-spin mx-auto mb-4"></div>
                        <p className="text-gray-700 dark:text-gray-300">正在加载数据，请稍候...</p>
                    </div>
                </div>
            )}

            <DailyCard
                title={
                    <div className="flex justify-between items-center">
                        <span>日报管理</span>
                        <div className="relative group">
                            <span className="cursor-help text-gray-500 hover:text-blue-500 bg-gray-100 dark:bg-gray-700 rounded-full h-6 w-6 flex items-center justify-center">?</span>
                            <div className="absolute right-0 w-64 p-2 mt-2 text-xs text-gray-600 dark:text-gray-300 bg-white dark:bg-gray-800 rounded shadow-lg border border-gray-200 dark:border-gray-700 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-10">
                                记录每日工作内容，系统将自动根据日报生成周报。
                                记录当天应完成的任务、已完成任务和未完成任务，将自动整合到周报中。
                            </div>
                        </div>
                    </div>
                }
                footer={
                    <div className="flex flex-wrap gap-3 justify-end">
                        <Button
                            variant="primary"
                            onClick={saveDailyReport}
                            loading={isLoading || pageLoading}
                            disabled={!date || pageLoading}
                        >
                            保存日报
                        </Button>
                        <Button
                            variant="secondary"
                            onClick={generateWeeklyFromDaily}
                            loading={isLoading || pageLoading}
                            disabled={pageLoading}
                        >
                            生成本周周报
                        </Button>
                        <Button
                            variant="outline"
                            onClick={fetchGitChanges}
                            loading={isLoading || pageLoading}
                            disabled={pageLoading}
                        >
                            导入Git更改
                        </Button>
                    </div>
                }
            >
                <div className="space-y-4">
                    {/* 日期选择 */}
                    <div className="w-full mb-4">
                        <Input
                            label="选择日期"
                            type="date"
                            value={date}
                            onChange={handleDateChange}
                            disabled={pageLoading}
                        />
                    </div>

                    {/* 任务信息 */}
                    <div className="flex flex-col sm:flex-row gap-4 mb-4">
                        <div className="w-full sm:w-1/3">
                            <Input
                                label="任务编号"
                                value={taskId}
                                onChange={(e) => setTaskId(e.target.value)}
                                placeholder="选填"
                                disabled={pageLoading}
                            />
                        </div>
                        <div className="w-full sm:w-2/3">
                            <Input
                                label="任务名称"
                                value={taskName}
                                onChange={(e) => setTaskName(e.target.value)}
                                placeholder="选填"
                                disabled={pageLoading}
                            />
                        </div>
                    </div>

                    {/* 工时信息 */}
                    <div className="flex flex-col sm:flex-row gap-4 mb-4">
                        <div className="w-full sm:w-1/2">
                            <Input
                                label="计划工时"
                                value={planHours}
                                onChange={(e) => setPlanHours(e.target.value)}
                                disabled={pageLoading}
                            />
                        </div>
                        <div className="w-full sm:w-1/2">
                            <Input
                                label="实际工时"
                                value={actualHours}
                                onChange={(e) => setActualHours(e.target.value)}
                                disabled={pageLoading}
                            />
                        </div>
                    </div>

                    {/* 工作内容 */}
                    <div className="mb-4">
                        <TextArea
                            label="今日应完成事项"
                            value={shouldComplete}
                            onChange={(e) => setShouldComplete(e.target.value)}
                            placeholder="今日计划完成的工作项，每行一项"
                            rows={5}
                            disabled={pageLoading}
                        />
                    </div>

                    <div className="mb-4">
                        <TextArea
                            label="今日已完成事项"
                            value={completed}
                            onChange={(e) => setCompleted(e.target.value)}
                            placeholder="今日实际完成的工作项，每行一项"
                            rows={5}
                            disabled={pageLoading}
                        />
                    </div>

                    <div className="mb-4">
                        <TextArea
                            label="今日未完成事项"
                            value={uncompleted}
                            onChange={(e) => setUncompleted(e.target.value)}
                            placeholder="今日未完成的工作项及原因，每行一项"
                            rows={5}
                            disabled={pageLoading}
                        />
                    </div>

                    <div className="mb-4">
                        <TextArea
                            label="备注"
                            value={remarks}
                            onChange={(e) => setRemarks(e.target.value)}
                            placeholder="其他需要说明的情况（选填）"
                            rows={3}
                            disabled={pageLoading}
                        />
                    </div>

                    {status && (
                        <div className={`
                            p-3 rounded-md my-4 flex items-center text-sm
                            ${status.includes("成功")
                                ? "bg-green-50 text-green-800 border border-green-200"
                                : status.includes("失败") || status.includes("错误")
                                    ? "bg-red-50 text-red-800 border border-red-200"
                                    : "bg-blue-50 text-blue-800 border border-blue-200"
                            }
                        `}>
                            <span className="mr-2">
                                {status.includes("成功")
                                    ? "✅"
                                    : status.includes("失败") || status.includes("错误")
                                        ? "❌"
                                        : "ℹ️"
                                }
                            </span>
                            {status}
                        </div>
                    )}
                </div>

                {/* 最近的日报 */}
                {recentReports.length > 0 && (
                    <div className="mt-8 border-t pt-6 border-gray-200 dark:border-gray-700">
                        <h3 className="text-lg font-medium text-gray-800 dark:text-gray-200 mb-3">最近的日报</h3>
                        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-3">
                            {recentReports.map((report, index) => (
                                <div
                                    key={index}
                                    className={`bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-3 hover:shadow-md transition-shadow duration-200 relative ${pageLoading ? 'pointer-events-none opacity-60' : ''}`}
                                >
                                    <div
                                        className="absolute top-2 right-2 w-6 h-6 flex items-center justify-center rounded-full hover:bg-red-100 dark:hover:bg-red-900 text-gray-500 hover:text-red-500 dark:text-gray-400 dark:hover:text-red-400 cursor-pointer z-10"
                                        onClick={async (e) => {
                                            if (pageLoading) return // 页面加载中不允许删除
                                            e.stopPropagation()

                                            if (!report.id) {
                                                setStatus("无法删除：ID不存在")
                                                return
                                            }

                                            try {
                                                // 直接删除,不使用确认对话框
                                                setIsLoading(true)

                                                // 从Supabase删除
                                                const { error } = await supabase
                                                    .from('dailies')
                                                    .delete()
                                                    .eq('id', report.id)

                                                if (error) throw error

                                                // 重新加载最近日报列表
                                                await loadRecentReports()

                                                // 如果删除的是当前正在编辑的日报，清空表单
                                                if (date === report.date) {
                                                    clearForm()
                                                }

                                                setStatus(`成功删除 ${report.date} 的日报`)
                                            } catch (error) {
                                                console.error("删除日报失败:", error)
                                                setStatus(`删除日报失败: ${error}`)
                                            } finally {
                                                setIsLoading(false)
                                            }
                                        }}
                                    >
                                        ✕
                                    </div>
                                    <div
                                        className="cursor-pointer"
                                        onClick={() => {
                                            if (pageLoading) return // 页面加载中不允许切换
                                            setDate(report.date)
                                            loadDailyReport(report.date)
                                        }}
                                    >
                                        <div className="text-sm font-medium text-blue-600 dark:text-blue-400 mb-1">
                                            {new Date(report.date).toLocaleDateString('zh-CN', { weekday: 'short', month: 'numeric', day: 'numeric' })}
                                        </div>
                                        <div className="text-gray-700 dark:text-gray-300 truncate">
                                            {report.task_name || '无任务名称'}
                                        </div>
                                    </div>
                                </div>
                            ))}
                        </div>
                    </div>
                )}
            </DailyCard>
        </div>
    )
} 